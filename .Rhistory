setwd("G:/Applications/Alabhya Dahal [DIME STC Application]/Sample Code in R,")
library(haven) #Stata file to R
library(raster) #Used to get Map of Nepal with administrative boundaries
library(tidyverse)
library(readxl)
library(maptools)
library(maps)
library(viridis)
library(ggthemes)
rm(list=ls())
npl_map <- getData(country="NP",level=3)
HHdata <-  read_excel("NLFSIII_Microdata/HH_Data.xlsx")
Absentee <- read_dta("NLFSIII_Microdata/S12_rc.dta")
primary_dist <- read_excel("NLFSIII_Microdata/Dist.xlsx")
Absent_Before <- read_dta("NLFSIII_Microdata/S13_rc.dta")
pri <- primary_dist #duplicating for analytic
pri$code <- paste0(pri$psu,pri$hhld)
Absentee$code <- paste0(Absentee$psu, Absentee$hhld)
pri$absentee <- ifelse(pri$code %in% Absentee$code,1,0)
#find the number of household with absentee, double verification
sum(pri$absentee)
length(unique(Absentee$code))
districtlevel <- summarise(group_by(pri,dist,), Total_absentee = sum(absentee))
districtlevel %>% top_n(10, Total_absentee) %>% arrange(desc(Total_absentee))
table(npl_map@data$NAME_3 %in% pri$dist) #check if the district of the map and HH data matches
n_distinct(pri$dist) # we have one 74 district in HH data, so all district matches with the map
#call function
source("G:/Data Works GitHub/Decoding Household Data/graph_function.R")
#map_analysis is a self made function. The above path directs to the function. The documentation to how to use the function is in the
# graph_function.R file. This function is highly customized, as a result it is unlikely to be reproducible on other analysis.
map_analysis(Absentee, pri)
#Mapping those who traveled abroad in last 5 years
#use dplyr::select because some packages overlaps
Absent_Before_CleanData <- Absent_Before %>% dplyr::select(psu,hhld,travelled5,rsn_travel) %>% filter(travelled5 ==1) #select only required variables and keep only those observation that migrated abroad
Absent_Before_CleanData$code <- paste0(Absent_Before_CleanData$psu, Absent_Before_CleanData$hhld)
#reason for travel
table(Absent_Before_CleanData$rsn_travel)
#Update pri dataset from current absent to those absent in last 5 years (not absent currently)
pri$absentee <- ifelse(pri$code %in% Absent_Before_CleanData$code,1,0)
#find the number of household with absentee, double verification
sum(pri$absentee)
length(unique(Absent_Before_CleanData$code))
#Graph with these absentee data
#Merge to graph
districtlevel <- summarise(group_by(pri,dist,), Total_absentee = sum(absentee))
districtlevel %>% top_n(10, Total_absentee) %>% arrange(desc(Total_absentee))
map_analysis(Absent_Before, pri)
#Part 3
#Map Absentee of those who went to work, business or seek opportunities
AbsenteeLabour <- Absent_Before_CleanData %>% filter(rsn_travel ==1 | rsn_travel ==2 | rsn_travel==4)
#Update pri dataset from current absent to those absent in last 5 years (not absent currently) plus those absent for seeking jobs
pri$absentee <- ifelse(pri$code %in% AbsenteeLabour$code,1,0)
#find the number of household with absentee, double verification
sum(pri$absentee)
length(unique(AbsenteeLabour$code))
#Graph with these absentee data
#Merge to graph
districtlevel <- summarise(group_by(pri,dist,), Total_absentee = sum(absentee))
districtlevel %>% top_n(10, Total_absentee) %>% arrange(desc(Total_absentee))
map_analysis(Absent_Before, pri)
#Map and top not too different
rm(np_map, choro_data,gg,npl,npl_map)
